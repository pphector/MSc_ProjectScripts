#!/usr/bin/python
'''
A script that takes the information generated by the sitemap.py script and generates a diagram
with the location of the motifs found signalled in a more understandable way. 

Requires the following arguments:
- Location of the fasta file of all the promoters
- Location of the sitemap result file

Returns: 
- A series of diagrams, one for each promoter, with the motif positions marked
- TO THE SO: md formatted information on the promoters and the motifs found therein

Dependencies:
- Requires the following python modules to be installed: 
    - Bio.SeqIO
    - Bio.graphics
    - reportlab (and all its dependencies)

Author: Hector Galvez
'''

from sys import argv # To be able to parse arguments in the comand line
# To be able to import the promoter sequences from the fasta file
from Bio import SeqIO 
from Bio.Alphabet import IUPAC
from Bio.SeqFeature import SeqFeature, FeatureLocation
# Import all the relevant 'drawing' modules
from reportlab.lib import colors 
from reportlab.lib.units import cm
from Bio.Graphics import GenomeDiagram

# Open input files
promoterfile = open(argv[1],'r')
sitemapfile = open(argv[2],'r')
generalfolder = ('/').join(argv[1].split('/')[:-1])
#print generalfolder

# Prepare useful variables
#   Define useful variables for parsing
colors = ['red','green','silver','aqua','blue','purple','lime','yellow','fuchsia','black','maroon','olive','teal','navy']
blankseparator = ' ' * 12
symbolstring = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZ*+.,:;!' #To correnctly parse the num of clusters when >9 motifs

# Prepare the promoter list and dictionary
promoters = SeqIO.parse(promoterfile, "fasta", alphabet=IUPAC.ambiguous_dna)
promoters_dict = SeqIO.to_dict(promoters)

# CONSUMERS
# Consumer functions for the sitemap parsing
def ispromoter(stringline,namelist):
    '''
    A simple function that takes a line of string and determines if the info is from a promoter in the list

    Has 2 arguments:
    - stringline : A string ending in a newline that was supposedly parsed from a mapsite file
    - namelist : A list of the names of used to id the promoters of interest
    Returns:
    - True if the line is a promoter info line
    - False if it is not a promoter info line
    '''
    linename = stringline.split(blankseparator)[0].split(' ')[0]
    if linename in namelist:
        return True
    else:
        return False
 
def ismotif(stringline,namelist):
    '''
    A simple function that takes a line of string and determines if the info is from a promoter in the list

    Has 2 arguments:
    - stringline : A string ending in a newline that was supposedly parsed from a mapsite file
    - namelist : A list of the names of used to id the promoters of interest
    Returns:
    - True if the line is a promoter info line
    - False if it is not a promoter info line
    '''
    linename = stringline.split(blankseparator)[0].split(' ')[0]
    if linename in namelist:
        return True
    else:
        return False

def consumeline(stringline):
    '''
    A simple function that takes a *promoter* line of string and parses it to extract the name of the 
    promoter and the position information of the motifs found. 

    Has 1 argument:
    - sringline : A *promoter* string ending in a newline character that was parsed from a mapsite file
    
    Returns:
    - A list with two elements: 
        - The first element is the string with the gene accession id 
        - The second element is a list with all the motif locations as separate items                        
    '''
    linename = stringline.split(blankseparator)[0].split(' ')[0]
    motiflist = stringline.strip().split(blankseparator)[1].split('|')
 #    print motiflist 
    for num in range(len(motiflist)):
        motiflist[num] = motiflist[num].strip().split(' ')
    return linename,motiflist        

# Consumer functions for the diagram building
def makefeatures(trackname, motif_pos_list):
    '''
    A function to create all the features for a track based on a list of motifs parsed from the setmap file.

    Has 2 arguments:
    - trackname : variable containing a *track* from the GenomeDiagram module
    - motif_pos_list : a list of lists obtained from the sitemap parser
    
    Returns: 
    - A populated featureset with features for all the motifs in the initial list
    '''
    featureset = trackname.new_set()
    for motif in motif_pos_list:
        start = int(motif[2].split('-')[0])
        end = int(motif[2].split('-')[1])
        clustnum = int(symbolstring.find(motif[0]) + 1)
        clustname = str(symbolstring.find(motif[0]) + 1)
        clustcolor = colors[(clustnum - 1) % len(colors)]
        feature = SeqFeature(FeatureLocation(start,end), strand=None)
        featureset.add_feature(feature, name=clustname, label=True, color=clustcolor, label_angle=0)
    return featureset

# SITEMAP PARSING
# Create the dictionary where info will be parsed into
mapsiteinfo = {}
# Start scanning sitemap file
for line in sitemapfile:
    inputline = str(line)
    if ispromoter(inputline,promoters_dict.keys()):
        #print inputline
        mapsiteinfo[consumeline(inputline)[0]] = consumeline(inputline)[1]
    else:
        pass
#print mapsiteinfo

# DIAGRAMS
# Build the diagrams
for item in mapsiteinfo.keys():
    prom_diagram = GenomeDiagram.Diagram(promoters_dict[item].id)
    motif_track = prom_diagram.new_track(1, name="Motifs")
    motif_features = makefeatures(motif_track, mapsiteinfo[item])
    
    # Draw and save the diagrams
    prom_diagram.draw(format='linear', pagesize=(15*cm,0.75*cm), fragments=1, start=0, end=1001)
    prom_diagram.write('%s/other/%s_motifdiagram.pdf' % (generalfolder,item),'pdf')
    prom_diagram.write('%s/other/%s_motifdiagram.png' % (generalfolder,item),'png', dpi=600)

# OUTPUT FOR SUMMARY
# Create an output text file
#outputfile = open('','w')

# Print int0 standard out the summary of all promoters
print '\n\n --------- \n\n## Summary of motifs found in promoters\n\n'
for item in mapsiteinfo.keys():
    print '%s ![%s](%s/other/%s_motifdiagram.png)\ \n' %(item,item,generalfolder,item)

# Print into standard out the information for each promoter individually
print '\n\n --------- \n\n## Individual promoter information '
for item in mapsiteinfo.keys():
    print '\n\n### %s' % item
    print ('\n\n').join(promoters_dict[item].description.split('|')[1:]).replace('Coords:','Gene Coordinates:')
    print '\n\n![%s](%s/other/%s_motifdiagram.png)\ ' %(item,generalfolder,item)
    print '\n| Motif number | Instance in promoter | Position |\n|--------:|:--------------:|:------------:|'
    for motif in mapsiteinfo[item]:
        motifnum = str(symbolstring.find(motif[0])+ 1)
        instance = motif[1]
        position = motif[2]
        print '| Motif %s | `%s` | %s |' % (motifnum,instance,position)

# Close opened files
promoterfile.close()
sitemapfile.close()
